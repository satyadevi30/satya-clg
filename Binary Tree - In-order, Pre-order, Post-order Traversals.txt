Write a program to insert nodes in a binary search tree and traverse it in all three types of traversals.

Input Format

Read elements upto -1

Constraints

1<=n<=10^7

Output Format

print output

Sample Input 0

7
8 4 12 1 5 9 13
Sample Output 0

In-Order Traversal: 1 4 5 8 9 12 13
Pre-Order Traversal: 8 4 1 5 12 9 13
Post-Order Traversal: 1 5 4 9 13 12 8
Sample Input 1

1
1
Sample Output 1

In-Order Traversal: 1
Pre-Order Traversal: 1
Post-Order Traversal: 1
# CODE:
class Node:
    def __init__(self,x):
        self.data=x
        self.left=None
        self.right=None
    def insert(self,x):
        if self.data==None:
            self.data=x
            return
        if self.data>x:
            if self.left==None:
                self.left=Node(x)
            else:
                self.left.insert(x)
        else:
            if self.right==None:
                self.right=Node(x)
            else:
                self.right.insert(x) 
    def inorder(self):
        if self.left:
            self.left.inorder()
        print(self.data,end=" ")
        if self.right:
            self.right.inorder()
    def preorder(self):
        print(self.data,end=" ")
        if self.left:
            self.left.preorder()
        if self.right:
            self.right.preorder()
    def postorder(self):
        if self.left:
            self.left.postorder()
        if self.right:
            self.right.postorder()
        print(self.data,end=" ")
n=int(input())
l=list(map(int,input().split()))[:n]
root=Node(l[0])
for i in range(1,n):
    root.insert(l[i])
print("In-Order Traversal:",end=" ")
root.inorder()
print()
print("Pre-Order Traversal:",end=" ")
root.preorder()
print()
print("Post-Order Traversal:",end=" ")
root.postorder()